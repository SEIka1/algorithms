#include <iostream>

template <size_t N>
struct A
{
	enum {
		value = A<N - 1>::value + A<N - 2>::value
	};
};

template <>
struct A<0> { enum { value = 0 }; };

template <>
struct A<1> { enum { value = 1 }; };

template <size_t N>
std::ostream& operator << (std::ostream& os, const A<N>& a)
{
	os << A<N>::value;
	return os;
}

int main()
{
    std::cout << "Hello World!\n";

	std::cout << A<0>() << std::endl;
	std::cout << A<1>() << std::endl;
	std::cout << A<2>() << std::endl;
	std::cout << A<3>() << std::endl;
	std::cout << A<4>() << std::endl;
	std::cout << A<5>() << std::endl;
	std::cout << A<6>() << std::endl;
	std::cout << A<7>() << std::endl;
	std::cout << A<8>() << std::endl;
	std::cout << A<9>() << std::endl;
	std::cout << A<10>() << std::endl;
	std::cout << A<11>() << std::endl;
	std::cout << A<12>() << std::endl;
	std::cout << A<13>() << std::endl;
	std::cout << A<14>() << std::endl;
	std::cout << A<15>() << std::endl;

	std::cout << A<34>() << std::endl; // 5702887 (35)
	return 0;
}
